2024-08-02 11:54:38,478 INFO: {"document": {"contract_type": null, "contract_requirements": null, "documentation": "# ERC20Token Smart Contract Documentation\n\n## Overview\nThe `ERC20Token` smart contract is a standard implementation of the ERC20 token protocol on the Ethereum blockchain. It facilitates the creation, management, and transfer of fungible tokens, allowing users to interact with the token ecosystem seamlessly. The contract includes functionalities for minting, burning, and transferring tokens, as well as managing allowances for delegated transfers.\n\n## Purpose\nThe primary purpose of the `ERC20Token` contract is to provide a secure and efficient framework for creating and managing a digital token that adheres to the ERC20 standard. This enables developers and users to leverage the benefits of blockchain technology, such as transparency, security, and decentralization, while facilitating token transactions and interactions within decentralized applications (dApps).\n\n## Objectives\nThe contract aims to achieve the following objectives:\n- **Token Creation:** Allow the deployment of a new token with a specified initial supply.\n- **Token Management:** Enable the owner to mint new tokens and burn existing tokens, thus controlling the total supply.\n- **Token Transfer:** Facilitate the transfer of tokens between users, ensuring that balances are updated accurately.\n- **Allowance Mechanism:** Implement an allowance system that permits users to delegate token spending rights to other addresses, enhancing flexibility in token management.\n- **Event Emission:** Emit events for significant actions, providing transparency and traceability of token transactions.\n\n## Functionalities\nThe `ERC20Token` contract includes several key functionalities:\n- **Balance Inquiry:** Users can check their token balance using the `balanceOf` function.\n- **Token Transfer:** The `transfer` function allows users to send tokens to another address, provided they have sufficient balance.\n- **Allowance Management:** Users can approve a spender to use a specified amount of their tokens through the `approve` function, and check the remaining allowance with the `allowance` function.\n- **Delegated Transfers:** The `transferFrom` function enables a spender to transfer tokens on behalf of the owner, subject to the approved allowance.\n- **Allowance Adjustment:** Users can increase or decrease the allowance for a spender using the `increaseAllowance` and `decreaseAllowance` functions, respectively.\n- **Token Minting:** The owner can create new tokens and assign them to a specified address using the `mint` function.\n- **Token Burning:** The owner can destroy tokens from their balance, reducing the total supply, through the `burn` function.\n- **Owner Retrieval:** The `getOwner` function allows anyone to retrieve the address of the contract owner.\n\n## Events\nThe contract emits several events to provide transparency and track important actions:\n- **Transfer:** Emitted when tokens are transferred from one address to another, indicating the sender, recipient, and amount transferred.\n- **Approval:** Emitted when an owner approves a spender to use a specified amount of tokens, indicating the owner, spender, and approved amount.\n- **Mint:** Emitted when new tokens are minted, indicating the recipient and the amount minted.\n\n## Conclusion\nThe `ERC20Token` smart contract serves as a robust and flexible framework for creating and managing fungible tokens on the Ethereum blockchain. By adhering to the ERC20 standard, it ensures compatibility with various wallets and dApps, promoting widespread adoption and usability. The contract's functionalities, including minting, burning, and allowance management, empower users to interact with their tokens efficiently while maintaining a high level of security and transparency.", "contract": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.26;\n\ncontract ERC20Token {\n    // State variables\n    uint256 public totalSupply;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowances;\n    address public owner;\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint256 amount); // Event for minting tokens\n\n    // Constructor to initialize the token\n    constructor(string memory name, string memory symbol, uint256 initialSupply) {\n        owner = msg.sender; // Set the contract deployer as the owner\n        totalSupply = initialSupply;\n        balances[owner] = initialSupply; // Assign the initial supply to the owner's balance\n    }\n\n    // Function to get the balance of an account\n    function balanceOf(address account) public view returns (uint256) {\n        return balances[account];\n    }\n\n    // Function to transfer tokens\n    function transfer(address to, uint256 amount) public returns (bool) {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        balances[to] += amount;\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    // Function to approve an allowance for a spender\n    function approve(address spender, uint256 amount) public returns (bool) {\n        allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    // Function to get the allowance of a spender\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return allowances[owner][spender];\n    }\n\n    // Function to transfer tokens from one account to another\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n        require(balances[from] >= amount, \"Insufficient balance\");\n        require(allowances[from][msg.sender] >= amount, \"Allowance exceeded\");\n        balances[from] -= amount;\n        balances[to] += amount;\n        allowances[from][msg.sender] -= amount;\n        emit Transfer(from, to, amount);\n        return true;\n    }\n\n    // Function to increase the allowance for a spender\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        allowances[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\n        return true;\n    }\n\n    // Function to decrease the allowance for a spender\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(allowances[msg.sender][spender] >= subtractedValue, \"Decreased allowance below zero\");\n        allowances[msg.sender][spender] -= subtractedValue;\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\n        return true;\n    }\n\n    // Function to burn tokens\n    function burn(uint256 amount) public {\n        require(msg.sender == owner, \"Only the owner can burn tokens\");\n        require(balances[owner] >= amount, \"Insufficient balance to burn\");\n        balances[owner] -= amount;\n        totalSupply -= amount;\n        emit Transfer(owner, address(0), amount); // Emit transfer to zero address\n    }\n\n    // Function to mint new tokens\n    function mint(address to, uint256 amount) public {\n        require(msg.sender == owner, \"Only the owner can mint tokens\");\n        totalSupply += amount;\n        balances[to] += amount;\n        emit Mint(to, amount); // Emit mint event\n    }\n\n    // Function to retrieve the owner's address\n    function getOwner() public view returns (address) {\n        return owner;\n    }\n}", "compiler_version": "0.8.26"}} [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:119]
2024-08-03 00:31:44,850 INFO: Flask API startup [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/__init__.py:71]
2024-08-03 14:16:05,258 INFO: Flask API startup [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/__init__.py:71]
2024-08-04 07:24:37,023 INFO: Flask API startup [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/__init__.py:71]
2024-08-05 04:15:59,692 INFO: Flask API startup [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/__init__.py:71]
