2024-07-31 06:37:35,109 INFO: {"document": {"contract_type": null, "contract_requirements": null, "documentation": "# LoanContract Documentation\n\n## Overview\nThe `LoanContract` is a Solidity smart contract designed to facilitate the lending and borrowing of Ether (ETH) between a lender and a borrower. It provides a structured framework for initiating loans, calculating repayment amounts, and managing loan statuses, including handling late payments.\n\n## Purpose\nThe primary purpose of the `LoanContract` is to automate the loan process on the Ethereum blockchain, ensuring transparency and security for both parties involved in the transaction. By utilizing smart contract technology, it eliminates the need for intermediaries, thereby reducing costs and increasing efficiency in the lending process.\n\n## Objectives\nThe contract aims to achieve the following objectives:\n- **Automate Loan Management:** Streamline the process of loan initiation, repayment, and status tracking.\n- **Ensure Transparency:** Provide clear visibility into loan terms, repayment amounts, and deadlines.\n- **Facilitate Secure Transactions:** Utilize blockchain technology to ensure secure and tamper-proof loan agreements.\n- **Handle Late Payments:** Implement mechanisms to manage late payments and update loan statuses accordingly.\n\n## Functionalities\nThe `LoanContract` includes several key functionalities:\n- **Loan Initialization:** The lender can set up a loan by specifying the loan amount, interest rate, and term. The borrower can then initiate the loan.\n- **Total Repayment Calculation:** The contract calculates the total repayment amount based on the loan amount and interest rate, ensuring that borrowers are aware of their financial obligations.\n- **Loan Repayment:** Borrowers can repay the loan in full, provided they meet the required conditions, including the correct repayment amount and timely payment.\n- **Remaining Balance Inquiry:** Borrowers can check the remaining balance of the loan, allowing them to track their repayment progress.\n- **Late Payment Handling:** The contract includes functionality to manage late payments, updating the loan status and notifying the borrower of the consequences.\n\n## Events\nThe `LoanContract` emits several events to provide real-time updates on loan activities:\n- **LoanInitiated:** Emitted when a loan is successfully initiated, providing details about the borrower, loan amount, and interest rate.\n- **LoanRepaid:** Emitted when a loan is fully repaid, indicating the amount repaid by the borrower.\n- **LatePayment:** Emitted when a payment is made after the repayment deadline, notifying stakeholders of the late payment status.\n\n## Conclusion\nThe `LoanContract` serves as a robust solution for managing loans on the Ethereum blockchain. By automating the lending process and providing clear mechanisms for repayment and late payment handling, it enhances the overall efficiency and security of peer-to-peer lending. This contract not only benefits borrowers by providing a transparent and straightforward loan process but also protects lenders by ensuring that loan terms are adhered to.", "contract": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.26;\n\ncontract LoanContract {\n    // State variables to store loan details\n    address public borrower;\n    address public lender;\n    uint public loanAmount;\n    uint public interestRate;\n    uint public loanTerm;\n    bool public loanActive;\n    uint public totalRepayment;\n    uint public repaymentAmount;\n    uint public repaymentDeadline;\n\n    // Enum to track loan status\n    enum LoanStatus { Active, Repaid, Late }\n    LoanStatus public loanStatus;\n\n    // Event emitted when the loan is initiated\n    event LoanInitiated(address indexed borrower, uint amount, uint interestRate);\n    // Event emitted when the loan is repaid\n    event LoanRepaid(address indexed borrower, uint amount);\n    // Event emitted when a payment is late\n    event LatePayment(address indexed borrower, uint amount);\n\n    // Constructor to initialize the loan details\n    constructor(address _lender) {\n        lender = _lender;\n        loanAmount = 10 ether; // 10 ETH\n        interestRate = 3; // 3%\n        loanTerm = 365 days; // 1 year\n        loanActive = false;\n        loanStatus = LoanStatus.Active;\n    }\n\n    // Function to initiate the loan\n    function initiateLoan() external {\n        require(!loanActive, \"Loan is already active.\");\n        borrower = msg.sender;\n        loanActive = true;\n        totalRepayment = loanAmount + (loanAmount * interestRate / 100);\n        repaymentAmount = totalRepayment; // Full repayment amount after 1 year\n        repaymentDeadline = block.timestamp + loanTerm;\n        emit LoanInitiated(borrower, loanAmount, interestRate);\n    }\n\n    // Function to calculate total repayment amount\n    function calculateTotalRepayment() external view returns (uint) {\n        require(loanActive, \"Loan is not active.\");\n        return totalRepayment;\n    }\n\n    // Function to repay the loan\n    function repayLoan() external payable {\n        require(loanActive, \"Loan is not active.\");\n        require(msg.value == repaymentAmount, \"Incorrect repayment amount.\");\n        require(block.timestamp <= repaymentDeadline, \"Payment is late.\");\n\n        loanActive = false;\n        loanStatus = LoanStatus.Repaid;\n        emit LoanRepaid(borrower, msg.value);\n    }\n\n    // Function to check remaining balance of the loan\n    function remainingBalance() external view returns (uint) {\n        require(loanActive, \"Loan is not active.\");\n        return totalRepayment - repaymentAmount;\n    }\n\n    // Function to handle late payments\n    function handleLatePayment() external {\n        require(loanActive, \"Loan is not active.\");\n        require(block.timestamp > repaymentDeadline, \"Payment is not late.\");\n\n        loanStatus = LoanStatus.Late;\n        emit LatePayment(borrower, repaymentAmount);\n    }\n}", "compiler_version": "0.8.26"}} [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:119]
2024-07-31 06:37:41,634 INFO: Updating smart contract 13 [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/smart_contract/routes.py:167]
2024-07-31 06:37:41,638 INFO: Updating smart contract version 33 [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/smart_contract/routes.py:184]
2024-07-31 06:37:41,638 INFO: Creating new version [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/smart_contract/routes.py:179]
