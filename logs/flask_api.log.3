2024-07-31 05:40:31,063 INFO: {"document": {"contract_type": null, "contract_requirements": null, "documentation": "# LoanContract Documentation\n\n## Overview\nThe `LoanContract` is a Solidity smart contract designed to facilitate a simple loan agreement between a borrower and a lender. The contract allows the borrower to take out a loan and provides the lender with the ability to withdraw funds once the loan is repaid. It incorporates basic functionalities for loan initiation, repayment, and fund withdrawal, while also maintaining the status of the loan throughout its lifecycle.\n\n## Purpose\nThe primary purpose of the `LoanContract` is to create a transparent and secure mechanism for managing loans on the Ethereum blockchain. By utilizing smart contract technology, it eliminates the need for intermediaries, thereby reducing costs and increasing efficiency in the lending process.\n\n## Objectives\nThe objectives of the `LoanContract` include:\n- **Facilitating Loan Transactions:** Enable borrowers to request loans and lenders to provide funds in a secure manner.\n- **Automating Loan Management:** Automate the processes of loan initiation, repayment, and fund withdrawal to minimize manual intervention.\n- **Ensuring Transparency:** Provide a clear record of loan terms, repayment amounts, and statuses through the use of events and state variables.\n- **Maintaining Security:** Ensure that only authorized parties (borrower and lender) can perform specific actions within the contract.\n\n## Functionalities\nThe `LoanContract` encompasses several key functionalities:\n- **Constructor:** Initializes the contract with the borrower's address, sets the lender as the contract deployer, and defines the loan amount, interest rate, loan term, and initial loan status.\n- **Initiate Loan:** Allows the borrower to initiate the loan process, emitting an event to signal the initiation.\n- **Calculate Total Repayment:** Computes the total amount the borrower must repay after one year, including interest, ensuring the loan is active before calculation.\n- **Repay Loan:** Permits the borrower to repay the loan, validating that the repayment amount is sufficient and updating the loan status to \"Repaid.\"\n- **Withdraw Funds:** Enables the lender to withdraw the total funds from the contract, ensuring that only the lender can perform this action and that funds are available.\n- **Get Loan Status:** Provides a method for any user to check the current status of the loan.\n\n## Events\nThe contract emits the following events to provide transparency and track important actions:\n- **LoanInitiated:** Triggered when the borrower initiates the loan, providing details about the borrower, loan amount, and interest rate.\n- **LoanRepaid:** Emitted when the borrower successfully repays the loan, detailing the total amount repaid.\n- **FundsWithdrawn:** Signaled when the lender withdraws funds from the contract, indicating the amount withdrawn.\n\n## Conclusion\nThe `LoanContract` serves as a foundational tool for managing loans on the Ethereum blockchain, offering a streamlined and secure approach for both borrowers and lenders. By automating key processes and ensuring transparency through events, the contract enhances the overall lending experience while maintaining a high level of security and trust.", "contract": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.26;\n\n/**\n * @title LoanContract\n * @dev A simple loan contract that allows a borrower to take a loan from a lender and also allows the lender to withdraw funds.\n */\ncontract LoanContract {\n    // State variables\n    address public borrower;\n    address public lender;\n    uint public loanAmount;\n    uint public interestRate;\n    uint public loanTerm;\n    enum LoanStatus { Active, Repaid, Defaulted }\n    LoanStatus public status;\n\n    // Events\n    event LoanInitiated(address indexed borrower, uint amount, uint interestRate);\n    event LoanRepaid(address indexed borrower, uint totalAmount);\n    event FundsWithdrawn(address indexed lender, uint amount);\n\n    /**\n     * @dev Constructor to initialize the loan contract.\n     * @param _borrower The address of the borrower.\n     */\n    constructor(address _borrower) {\n        lender = msg.sender; // The lender is the one who deploys the contract\n        borrower = _borrower; // Set the borrower address\n        loanAmount = 10 ether; // 10 ETH\n        interestRate = 3; // 3%\n        loanTerm = 365 days; // 1 year\n        status = LoanStatus.Active; // Initial loan status\n    }\n\n    /**\n     * @dev Function to initiate the loan.\n     * Only the borrower can initiate the loan.\n     */\n    function initiateLoan() external {\n        require(msg.sender == borrower, \"Only the borrower can initiate the loan.\");\n        emit LoanInitiated(borrower, loanAmount, interestRate);\n    }\n\n    /**\n     * @dev Function to calculate total repayment amount after 1 year.\n     * @return totalRepayment The total amount to be repaid.\n     */\n    function calculateTotalRepayment() public view returns (uint) {\n        require(status == LoanStatus.Active, \"Loan is not active.\");\n        uint totalRepayment = loanAmount + (loanAmount * interestRate / 100);\n        return totalRepayment;\n    }\n\n    /**\n     * @dev Function to allow the borrower to repay the loan.\n     * Only the borrower can repay the loan.\n     */\n    function repayLoan() external payable {\n        require(msg.sender == borrower, \"Only the borrower can repay the loan.\");\n        uint totalRepayment = calculateTotalRepayment();\n        require(msg.value >= totalRepayment, \"Insufficient funds to repay the loan.\");\n        status = LoanStatus.Repaid;\n        emit LoanRepaid(borrower, totalRepayment);\n    }\n\n    /**\n     * @dev Function to allow the lender to withdraw funds from the contract.\n     * Only the lender can withdraw funds.\n     */\n    function withdrawFunds() external {\n        require(msg.sender == lender, \"Only the lender can withdraw funds.\");\n        uint balance = address(this).balance;\n        require(balance > 0, \"No funds available to withdraw.\");\n        payable(lender).transfer(balance);\n        emit FundsWithdrawn(lender, balance);\n    }\n\n    /**\n     * @dev Function to check loan status.\n     * @return status The current status of the loan.\n     */\n    function getLoanStatus() external view returns (LoanStatus) {\n        return status;\n    }\n}", "compiler_version": "0.8.26"}} [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:119]
2024-07-31 05:41:58,122 INFO: Updating smart contract... [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:93]
2024-07-31 05:42:23,202 INFO: reflect [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:112]
