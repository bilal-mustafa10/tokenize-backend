2024-08-02 11:53:55,407 INFO: {"reflect": {"contract": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.26;\n\ncontract ERC20Token {\n    // State variables\n    uint256 public totalSupply;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowances;\n    address public owner;\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint256 amount);\n\n    // Constructor to initialize the token\n    constructor(uint256 initialSupply) {\n        owner = msg.sender; // Set the contract deployer as the owner\n        totalSupply = initialSupply;\n        balances[owner] = initialSupply; // Assign the initial supply to the owner's balance\n    }\n\n    // Function to get the balance of an account\n    function balanceOf(address account) public view returns (uint256) {\n        return balances[account];\n    }\n\n    // Function to transfer tokens\n    function transfer(address to, uint256 amount) public returns (bool) {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        balances[to] += amount;\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    // Function to approve an allowance for a spender\n    function approve(address spender, uint256 amount) public returns (bool) {\n        allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    // Function to get the allowance of a spender\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return allowances[owner][spender];\n    }\n\n    // Function to transfer tokens from one account to another\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n        require(balances[from] >= amount, \"Insufficient balance\");\n        require(allowances[from][msg.sender] >= amount, \"Allowance exceeded\");\n        balances[from] -= amount;\n        balances[to] += amount;\n        allowances[from][msg.sender] -= amount;\n        emit Transfer(from, to, amount);\n        return true;\n    }\n\n    // Function to increase the allowance for a spender\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        allowances[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\n        return true;\n    }\n\n    // Function to decrease the allowance for a spender\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(allowances[msg.sender][spender] >= subtractedValue, \"Decreased allowance below zero\");\n        allowances[msg.sender][spender] -= subtractedValue;\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\n        return true;\n    }\n\n    // Function to mint new tokens\n    function mint(uint256 amount) public {\n        require(msg.sender == owner, \"Only the owner can mint tokens\");\n        totalSupply += amount;\n        balances[owner] += amount;\n        emit Mint(owner, amount);\n        emit Transfer(address(0), owner, amount); // Emit transfer from zero address\n    }\n\n    // Function to burn tokens\n    function burn(uint256 amount) public {\n        require(msg.sender == owner, \"Only the owner can burn tokens\");\n        require(balances[owner] >= amount, \"Insufficient balance to burn\");\n        balances[owner] -= amount;\n        totalSupply -= amount;\n        emit Transfer(owner, address(0), amount); // Emit transfer to zero address\n    }\n\n    // Function to retrieve the owner's address\n    function getOwner() public view returns (address) {\n        return owner;\n    }\n}", "compiler_version": "0.8.26"}} [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:119]
2024-08-02 11:53:55,522 INFO: check_code [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:112]
2024-08-02 11:54:26,529 INFO: reflect [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:112]
2024-08-02 11:54:26,529 INFO: {"reflect": {"contract": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.26;\n\ncontract ERC20Token {\n    // State variables\n    uint256 public totalSupply;\n    mapping(address => uint256) public balances;\n    mapping(address => mapping(address => uint256)) public allowances;\n    address public owner;\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint256 amount); // Event for minting tokens\n\n    // Constructor to initialize the token\n    constructor(string memory name, string memory symbol, uint256 initialSupply) {\n        owner = msg.sender; // Set the contract deployer as the owner\n        totalSupply = initialSupply;\n        balances[owner] = initialSupply; // Assign the initial supply to the owner's balance\n    }\n\n    // Function to get the balance of an account\n    function balanceOf(address account) public view returns (uint256) {\n        return balances[account];\n    }\n\n    // Function to transfer tokens\n    function transfer(address to, uint256 amount) public returns (bool) {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        balances[to] += amount;\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    // Function to approve an allowance for a spender\n    function approve(address spender, uint256 amount) public returns (bool) {\n        allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    // Function to get the allowance of a spender\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return allowances[owner][spender];\n    }\n\n    // Function to transfer tokens from one account to another\n    function transferFrom(address from, address to, uint256 amount) public returns (bool) {\n        require(balances[from] >= amount, \"Insufficient balance\");\n        require(allowances[from][msg.sender] >= amount, \"Allowance exceeded\");\n        balances[from] -= amount;\n        balances[to] += amount;\n        allowances[from][msg.sender] -= amount;\n        emit Transfer(from, to, amount);\n        return true;\n    }\n\n    // Function to increase the allowance for a spender\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        allowances[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\n        return true;\n    }\n\n    // Function to decrease the allowance for a spender\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(allowances[msg.sender][spender] >= subtractedValue, \"Decreased allowance below zero\");\n        allowances[msg.sender][spender] -= subtractedValue;\n        emit Approval(msg.sender, spender, allowances[msg.sender][spender]);\n        return true;\n    }\n\n    // Function to burn tokens\n    function burn(uint256 amount) public {\n        require(msg.sender == owner, \"Only the owner can burn tokens\");\n        require(balances[owner] >= amount, \"Insufficient balance to burn\");\n        balances[owner] -= amount;\n        totalSupply -= amount;\n        emit Transfer(owner, address(0), amount); // Emit transfer to zero address\n    }\n\n    // Function to mint new tokens\n    function mint(address to, uint256 amount) public {\n        require(msg.sender == owner, \"Only the owner can mint tokens\");\n        totalSupply += amount;\n        balances[to] += amount;\n        emit Mint(to, amount); // Emit mint event\n    }\n\n    // Function to retrieve the owner's address\n    function getOwner() public view returns (address) {\n        return owner;\n    }\n}", "compiler_version": "0.8.26"}} [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:119]
2024-08-02 11:54:26,634 INFO: check_code [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:112]
2024-08-02 11:54:26,634 INFO: {"check_code": {"error": "no", "error_message": ""}} [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:119]
2024-08-02 11:54:38,476 INFO: document [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:112]
