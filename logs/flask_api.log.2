2024-07-25 23:36:21,230 ERROR: Error generating smart contract: Expected a dictionary but got <class 'list'>: [FunctionDescription(function_name='ERC20Token', code='// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20Token is IERC20 {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 private _totalSupply;\n    address public owner;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    event Mint(address indexed to, uint256 amount);\n    event Burn(address indexed from, uint256 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, "Only owner can call this function");\n        _;\n    }\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 initialSupply) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        _totalSupply = initialSupply;\n        owner = msg.sender;\n        _balances[msg.sender] = initialSupply;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), "Transfer from the zero address");\n        require(recipient != address(0), "Transfer to the zero address");\n        require(_balances[sender] >= amount, "Insufficient balance");\n\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        require(_allowances[sender][msg.sender] >= amount, "Allowance exceeded");\n        _transfer(sender, recipient, amount);\n        _allowances[sender][msg.sender] -= amount;\n        return true;\n    }\n\n    function mint(address account, uint256 amount) public onlyOwner {\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public onlyOwner {\n        require(_balances[account] >= amount, "Insufficient balance to burn");\n        _totalSupply -= amount;\n        _balances[account] -= amount;\n        emit Burn(account, amount);\n    }\n}', description='The ERC20Token contract implements the ERC20 interface for a standard token. It includes functions for transferring tokens, checking balances, approving transfers, and minting/burning tokens. The contract also includes an onlyOwner modifier to restrict certain functions to the contract owner.')] [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/generate_smart_contract.py:41]
2024-07-25 23:36:21,232 ERROR: Error generating smart contract: Expected a dictionary but got <class 'list'>: [FunctionDescription(function_name='ERC20Token', code='// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract ERC20Token is IERC20 {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 private _totalSupply;\n    address public owner;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    event Mint(address indexed to, uint256 amount);\n    event Burn(address indexed from, uint256 amount);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, "Only owner can call this function");\n        _;\n    }\n\n    constructor(string memory _name, string memory _symbol, uint8 _decimals, uint256 initialSupply) {\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        _totalSupply = initialSupply;\n        owner = msg.sender;\n        _balances[msg.sender] = initialSupply;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), "Transfer from the zero address");\n        require(recipient != address(0), "Transfer to the zero address");\n        require(_balances[sender] >= amount, "Insufficient balance");\n\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        require(_allowances[sender][msg.sender] >= amount, "Allowance exceeded");\n        _transfer(sender, recipient, amount);\n        _allowances[sender][msg.sender] -= amount;\n        return true;\n    }\n\n    function mint(address account, uint256 amount) public onlyOwner {\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public onlyOwner {\n        require(_balances[account] >= amount, "Insufficient balance to burn");\n        _totalSupply -= amount;\n        _balances[account] -= amount;\n        emit Burn(account, amount);\n    }\n}', description='The ERC20Token contract implements the ERC20 interface for a standard token. It includes functions for transferring tokens, checking balances, approving transfers, and minting/burning tokens. The contract also includes an onlyOwner modifier to restrict certain functions to the contract owner.')] [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:45]
2024-07-25 23:38:41,458 INFO: Flask API startup [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/__init__.py:71]
2024-07-25 23:38:45,268 INFO: Generating smart contract for description: A simple ERC20 token contract with mint and burn functionalities. [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/generate_smart_contract.py:25]
2024-07-25 23:38:47,059 INFO: Response from model: content='Contract Type: ERC20 Token Contract\n\nRequirements:\n1. Implement the ERC20 interface with functions such as transfer, approve, transferFrom, totalSupply, balanceOf, and allowance.\n2. Include functions for minting new tokens and burning existing tokens.\n3. Ensure that the contract is able to handle token transfers and approvals according to the ERC20 standard.\n4. Implement proper access control mechanisms for minting and burning functions to prevent unauthorized access.\n5. Include events for minting and burning actions to provide transparency and traceability on the blockchain.' response_metadata={'token_usage': {'completion_tokens': 110, 'prompt_tokens': 102, 'total_tokens': 212}, 'model_name': 'gpt-3.5-turbo-0125', 'system_fingerprint': None, 'finish_reason': 'stop', 'logprobs': None} id='run-7a7d5fa8-eecd-4118-b11a-949d2cfcd7ad-0' usage_metadata={'input_tokens': 102, 'output_tokens': 110, 'total_tokens': 212} [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/smart_contract_generator/smart_contract_classifier.py:25]
