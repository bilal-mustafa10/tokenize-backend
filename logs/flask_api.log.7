2024-07-31 05:42:23,203 INFO: {"reflect": {"contract": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.26;\n\n/**\n * @title LoanContract\n * @dev A simple loan contract that allows a borrower to take a loan from a lender and also allows the lender to withdraw funds.\n */\ncontract LoanContract {\n    // State variables\n    address public borrower;\n    address public lender;\n    uint public loanAmount;\n    uint public interestRate;\n    uint public loanTerm;\n    enum LoanStatus { Active, Repaid, Defaulted }\n    LoanStatus public status;\n\n    // Events\n    event LoanInitiated(address indexed borrower, uint amount, uint interestRate);\n    event LoanRepaid(address indexed borrower, uint totalAmount);\n    event FundsWithdrawn(address indexed lender, uint amount);\n\n    /**\n     * @dev Constructor to initialize the loan contract.\n     * @param _borrower The address of the borrower.\n     */\n    constructor(address _borrower) {\n        lender = msg.sender; // The lender is the one who deploys the contract\n        borrower = _borrower; // Set the borrower address\n        loanAmount = 2 ether; // 2 ETH\n        interestRate = 7; // 7%\n        loanTerm = 10 * 365 days; // 10 years\n        status = LoanStatus.Active; // Initial loan status\n    }\n\n    /**\n     * @dev Function to initiate the loan.\n     * Only the borrower can initiate the loan.\n     */\n    function initiateLoan() external {\n        require(msg.sender == borrower, \"Only the borrower can initiate the loan.\");\n        emit LoanInitiated(borrower, loanAmount, interestRate);\n    }\n\n    /**\n     * @dev Function to calculate total repayment amount after the loan term.\n     * @return totalRepayment The total amount to be repaid.\n     */\n    function calculateTotalRepayment() public view returns (uint) {\n        require(status == LoanStatus.Active, \"Loan is not active.\");\n        uint totalRepayment = loanAmount + (loanAmount * interestRate / 100);\n        return totalRepayment;\n    }\n\n    /**\n     * @dev Function to allow the borrower to repay the loan.\n     * Only the borrower can repay the loan.\n     */\n    function repayLoan() external payable {\n        require(msg.sender == borrower, \"Only the borrower can repay the loan.\");\n        uint totalRepayment = calculateTotalRepayment();\n        require(msg.value >= totalRepayment, \"Insufficient funds to repay the loan.\");\n        status = LoanStatus.Repaid;\n        emit LoanRepaid(borrower, totalRepayment);\n    }\n\n    /**\n     * @dev Function to allow the lender to withdraw funds from the contract.\n     * Only the lender can withdraw funds.\n     */\n    function withdrawFunds() external {\n        require(msg.sender == lender, \"Only the lender can withdraw funds.\");\n        uint balance = address(this).balance;\n        require(balance > 0, \"No funds available to withdraw.\");\n        payable(lender).transfer(balance);\n        emit FundsWithdrawn(lender, balance);\n    }\n\n    /**\n     * @dev Function to check loan status.\n     * @return status The current status of the loan.\n     */\n    function getLoanStatus() external view returns (LoanStatus) {\n        return status;\n    }\n}", "compiler_version": "0.8.26"}} [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:119]
2024-07-31 05:42:23,449 INFO: check_code [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:112]
2024-07-31 05:42:23,449 INFO: {"check_code": {"error": "no", "error_message": ""}} [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:119]
2024-07-31 05:42:33,318 INFO: document [in /Users/bilal/Documents/comsc/kings/individual-project/Tokenize/backend/app/ai/routes.py:112]
